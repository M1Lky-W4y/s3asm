#!/usr/bin/env python

from __future__ import print_function

import sys, os, collections

def print_data(mnemonic,size):
    def f(dass,s,a=0):
        import cStringIO
        sio = cStringIO.StringIO(s)
        buf = sio.read(size)
        addr = a
        while len(buf) == size:
            data = '$' +  ''.join("%02x" % ord(c) for c in buf).lstrip('0')
            dass[addr]=('',mnemonic,data)
            addr += size
            buf = sio.read(4)
        if len(buf) != 0:
            raise Exception("%d bytes not handled near address %x" %
                            (len(buf),addr))
        return addr

    return f
long  = print_data('dc.l',4)
short = print_data('dc.w',2)
byte  = print_data('dc.b',1)

def label_pass(dass,args):
    if args.verbose: print("Starting labeling pass",file=sys.stderr)
    lab_counter = 0
    for addr in dass.iterkeys():
        lab, mne, op = dass[addr]
        if mne in [ 'dbra', 'bra.b', 'bne.b', 'dbne', 'beq.w', 'blt.b', 'bne.w', 'bsr.w', 'bcs.b', 'beq.b', 'bmi.b', 'bge.b', 'ble.b', 'bra.w' ]:
            i = op.find('#$')
            if i != -1:
                a = int(op[i+2:],16)
                if not dass.has_key(a):
                    print("WARNING: address 0x%x not in disassembly (yet)" % a,file=sys.stderr)
                    dass[addr] = (lab,'nop','')
                    continue
                labelpos = dass[a]
                labstr = labelpos[0]
                if not len(labstr):
                    labstr  = "lab_%d" % lab_counter
                    if a != addr: dass[a] = (labstr,labelpos[1],labelpos[2])
                    lab_counter += 1
                op = op[:i]+labstr
                if a == addr: lab = labstr
                dass[addr] = (lab,mne,op)
                #print("Label %s address 0x%x" % (labstr,a),file=sys.stderr)
    if args.verbose: print("Finished labeling pass",file=sys.stderr)
    
def output_pass(dass,segments,args):
    if args.verbose: print("Starting output pass",file=sys.stderr)
    output = sys.stdout
    if args.outfile: output = open(args.output,'w')
        
    seg_counter = 0
    n,l,f =  segments[seg_counter]
    print(";",file=output)
    print("; %s" % n,file=output)
    seg_next = l
    for addr,data in dass.items():
        lab, mne, op = data
        if seg_next != -1 and addr >= seg_next:
            seg_counter += 1
            if seg_counter == len(segments):
                break
            n,l,f =  segments[seg_counter]
            print(";",file=output)
            print("; %s" % n,file=output)
            seg_next += l
        print("%s\t%s %s\t; 0x%x" % (lab,mne,op.ljust(20),addr),file=output)
    if args.verbose: print("Finished output pass",file=sys.stderr)
    if args.outfile: output.close()

def read_control(control):
    if not os.path.exists(control):
        print("Control file '%s' does not exist" % control, file=sys.stderr)
        sys.exit(1)
    segments = []
    with open(control,'r') as f:
        for l in f:
            l = l.strip()
            if l.startswith('#') or l.startswith(';'): continue
            cols = l.split()
            name, length, action = '', 0, None
            if len(cols) > 0:
                name = str(cols[0])
            if len(cols) > 1:
                base = 10
                if cols[1].startswith('0x'): base=16
                length = int(cols[1],base)
            if len(cols) > 2:
                action = eval(cols[2])
            segments.append((name,length,action))
    return segments

def read_input(infile):
    if infile == '-':
        code = sys.stdin.read()
    else:
        if not os.path.exists(infile):
            print("Input file '%s' does not exist" % infile, file=sys.stderr)
            sys.exit(1)
        with open(infile,'rb') as f:
            code = f.read()
    return code
    
def dasm(args):
    from capstone import Cs, CS_ARCH_M68K, CS_MODE_M68K_000

    code = read_input(args.input[0])
    if args.verbose:
        print("Read %d bytes from '%s'" % (len(code),args.input[0]),
              file=sys.stderr)
            
    if args.control:
        segments = read_control(args.control)
    else:
        segments = [("data",-1,long)]
    if args.verbose:
        print("Found %d segment(s)" % len(segments), file=sys.stderr)

    if args.verbose:
        print("Starting disassembling pass",file=sys.stderr)
    dass = collections.OrderedDict()
    md = Cs(CS_ARCH_M68K, CS_MODE_M68K_000)
    offset = 0
    for n,l,f in segments:
        if l < 0:
            segment = code[offset:]
        else:
            segment = code[offset:offset+l]
        if n.startswith("code"):
            next_address = offset
            for i in md.disasm(segment,offset):
                dass[i.address]=('',i.mnemonic,i.op_str.replace(', ',','))
                next_address = int(i.address+i.size)
            if next_address != offset+l:
                print("Stopping early at global offset 0x%x, segment offset 0x%x" % (next_address,next_address-offset),file=sys.stderr)
                data = ' '.join("%02x" % ord(c) for c in code[next_address:next_address+4])
                print("Next 4 bytes: %s" % data,file=sys.stderr)
                break
            if not l < 0: offset += l
        else:
            offset = f(dass,segment,offset)
    if args.verbose:
        print("Finished disassembling pass",file=sys.stderr)
        
    # label pass
    if args.label: label_pass(dass,args)
    
    # output pass
    output_pass(dass,segments,args)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("-c", "--control", type=str,
                        help="control file")
    parser.add_argument("-l", "--label", action='store_true',
                        help="replace constant branch addresses by labels")
    parser.add_argument("-o", "--outfile", type=str,
                        help="write to output to file")
    parser.add_argument("-v", "--verbose", action='store_true',
                        help="print verbose output")
    parser.add_argument("input", type=str, nargs=1,
                        help="name of input file or '-' for stdin")
    args = parser.parse_args()
    dasm(args)
